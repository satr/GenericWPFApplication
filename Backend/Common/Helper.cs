#region Copyright notice and license
// Copyright 2016 github.com/satr.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of github.com/satr nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Security.Cryptography;
using System.Text;
using Backend.Annotations;

namespace Backend.Common
{
    public class Helper
    {
        //Avoid issues with proxies during clone in entities generated by EntityFramework
        public static T ShallowCopy<T>(T source)
            where T : class, new()
        {
            var sourceProperties = typeof(T).GetProperties().Where(p => p.CanRead && p.CanWrite);
            var clone = new T();
            foreach (var property in sourceProperties)
            {
                property.SetValue(clone, property.GetValue(source, null), null);
            }
            return clone;
        }

        public static void ApplyChangesToPrimitiveProperties([NotNull]object source, [NotNull]object destination)
        {
            var type = source.GetType();
            // ReSharper disable once UseMethodIsInstanceOfType
            if (!type.IsAssignableFrom(destination.GetType()))
                throw new ArgumentException("Objects types do not match.");
            foreach (var propertyInfo in type.GetProperties()
                                              .Where(propertyInfo => propertyInfo.PropertyType.IsPublic
                                                                    && (propertyInfo.PropertyType.IsPrimitive || propertyInfo.PropertyType == typeof(string))))
            {
                propertyInfo.SetValue(destination, propertyInfo.GetValue(source));
            }
        }

        public static void ApplyChangesToPrimitivePropertiesOfDifferentTypes([NotNull]object source, [NotNull]object destination)
        {
            var sourceProperties = source.GetType().GetProperties();
            var destinationProperties = destination.GetType().GetProperties();
            foreach (var sourceProperty in sourceProperties.Where(propertyInfo => propertyInfo.PropertyType.IsPublic
                                                                    && (propertyInfo.PropertyType.IsPrimitive || propertyInfo.PropertyType == typeof(string))))
            {
                var destinationProperty = destinationProperties.FirstOrDefault(p => Equals(p.Name, sourceProperty.Name));
                if (destinationProperty != null)
                    destinationProperty.SetValue(destination, sourceProperty.GetValue(source));
            }
        }

        public static void ApplyChangesToCollection<T>(IEnumerable<T> source, ICollection<T> destination)
        {
            destination.Clear();
            foreach (var item in source)
            {
                destination.Add(item);
            }
        }

        public static string ExpandMessages(Exception exception)
        {
            var sb = new StringBuilder();
            sb.AppendLine(exception.Message);
            while (exception.InnerException != null)
            {
                sb.AppendLine(exception.InnerException.Message);
                exception = exception.InnerException;
            }
            return sb.ToString();
        }
    }
}
